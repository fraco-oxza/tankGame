@startuml

top to bottom direction
skinparam linetype ortho

class Main{
    +main()
}

class TankGame {
    + players: list[Player]
    + context: Context
    + menu: Menu
    + menu_option: OptionMenu
    + screen_resolution: list[tuple[int, int]]
    +font: Font

    + TankGame(Context):
    + create_player():
    + game_brief():
    + show_instructions(Surface):
    + start_menu():
    + Replace():
    + start():
}
class PositionTable{
    +table: pygame.Vector2
    +screen: pygame.Surface

    +PositionTable(screen: pygame.Surface)
    +draw_blocks()
    +show_positions()
    +generate_surface(mensaje: str)
    +position_box(sf: pygame.surface.Surface, sum)
    +position_tank(sf: pygame.surface.Surface, sum)
    +position_number(sf: pygame.surface.Surface, sum)
    +button()
    +handle_input(mouse: pygame.Vector2)
    +tank(j)
    +ranking(i)
    +bubble_sort()

}
class PositionTableButton{
    VOLVER_A_JUGAR = int
 }
class Cannonballs extends Drawable {
    + damage:int
    + position: Point
    + velocity: Velocity
    + trajectory: list[pygame.Vector2]
    + max_height: float
    + max_distance: int
    + is_alive: bool

    +Cannonballs(Position, Velocity):
    +tick(dt: float):
    +kill():
    +draw_trajectory(screen: pygame.surface.Surface):
    +draw(screen: pygame.surface.Surface)
    +get_max_height(): int
    +calculate_distance_to(tank_position: pygame.Vector2): int
}
class Cannonball105mm extends Cannonball{
    + damage: int
    + radius_damage: int
    + units_available: int
    +Cannonball105mm(position, velocity)
    +draw(Surface)
}
class Cannonball60mm extends Cannonball{
    +Cannonball60mm((position, velocity):
    + damage: int
    + radius_damage: int
    + units_available: int
    +draw(Surface)
}
 class Cannonball80mm extends Cannonball{
    +Cannonball80mm((position, velocity):
    + damage: int
    + radius_damage: int
    + units_available: int
    +draw(Surface)
}

interface Drawable {
    + draw(Surface)
}

class HUD extends Drawable{
    + tanks: list[Tank]
    + left: int
    + top: int
    + width: int
    + height: int
    + color: list[int]
 +HUD(tank,TankGame)
 +draw_shoot_info(screen: pygame.surface.Surface)
 +draw_cannonball_105_mm(self, screen: pygame.surface)
 +draw_cannonball_80_mm(self, screen: pygame.surface)
 +draw_cannonball_60_mm(self, screen: pygame.surface)
 +tank_info():pygame.surface
 +get_actual_player()
 +get_select_cannonball()
 +get_cannonball_indicators()
 +draw_tank_health(self, sf: pygame.surface.Surface):
 +draw(Surface)
 }

class WinnerScreen extends Drawable{
    +WinnerScreen():
    +winner_mensaje(Surface)
    +draw(Surface): None
}

class InGameMenu{
    +fontExit: Font
    +fontBack: Font
    +fontRestart: Font
    +storm: SnowStorm
    +box_size = pygame.Vector2
    +box_pos: Optional[tuple[float, float]]
    +botton_color1: str
    +botton_color2: str
    +botton_color3: str
    +hover_botton_color: str
    +button_reset_position = pygame.Vector2
    +sobre: Optional[int]

    +InGameMenu(screen: pygame.Surface, storm: SnowStorm)
    +tick(dt: float)
    +render()
    +handleInput(mouse: pygame.Vector2)
    +start_menu()
    +restart(Mensaje: str)

    + InGameMenu(Surface, SnowStorm):
    + tick(float):
    + render():
    + handle_input(Vector2):
    + start_menu(): int
    + restart(str):

}

class Terrain extends Drawable,Collidable {
    +size: tuple[int, int]
    +ground_lines: list[int]
    +new_ground_lines: list[list[float]]
    +falling: list[list[tuple[float, float]]]


    +Terrain(tuple[int,int], int, int, list[str])
    +generate_terrain(mountains: int, valleys: int)
    +mountain(i: int, j: int, height: int):
    +valley( inicio: int, fin: int, profundidad: int)
    +draw_falling(screen: pygame.surface.Surface)
    +draw( screen: pygame.surface.Surface)
    +collidesWith( point: pygame.Vector2): bool
}

class FileCache{
    +__getitem__(filename: str)
}

class AnimationCache extends FileCache{
    +__animations: dict[str, list[pygame.surface.Surface]
    +__init__()
    +__getitem__(filename: str)
}

class ImageCache extends FileCache{
    +__images: dict[str, pygame.surface.Surface]
    +__init__()
    +__getitem__(filename: str)
}

class FontCache extends FileCache{
    +__fonts: dict[tuple[str, int], pygame.font.Font]
    +__init__()
    +__getitem__(filename: str)
}

class AudioCache extends FileCache{
    +__audios: dict[str, pygame.mixer.Sound]
    +__init__()
    +__getitem__(filename: str)
}

class Speedometer{
    +size: int
    +min: int
    +max: int
    +actual: float
    +Speedometer()
    +get_draw()
}
class Collidable {
 +collides_with(Point)) : Boolean
}

class Background extends Drawable{
    +sky_image: pygame.Surface

    + Background(image: str)
    + draw(Surface):None

}
class Tank extends Collidable,Drawable  {
    - player: Player
    - color: Color
    - position: Position
    -shoot_velocity: float
    -shoot_angle: float
    +actual: int
    +available: list[int]
    +select: SelectCannonball
    +life: int
    +is_alive:bool

    +Tank(position,color,player)
    +collides_with(Point,cannon) : Boolean
    +shoot(): Cannonball
    +draw(Surface) : None
    +random_shoot(position)
}

class Player {
    +name: str
    +points: int
    +money: int
    +ammunition: dict[int, int]
    +color: str | pygame.Color
    +money: int
    +murders: int
    +deads: int

    +Player(name: str, color: str | pygame.Color)
    +score(Impact, pygame.Vector2)
}
class WinnerScreen extends Drawable
{
    +WinnerScreen(tank_game)
    +winner_mensaje(screen: pygame.surface.Surface)
    +draw(screen: pygame.surface.Surface)
}
class Impact
{
    +position: pygame.Vector2
    +impact_type: int

    +Impact(Position, ImpactType)
}
class inputs{
    +check_running()
    +run_until_exit(func)
}
class Constants {
    + GRAVITY: double
    + TANK_HIT_BOX_SIZE: double
    + TERRAIN_COLOR: Color
    + WINDOWS_SIZE :int
    + TERRAIN_LINE_WIDTH:int
    + SEA_LEVEL :int
    + FPS :int
    +MOUNTAINS:int
    +VALLEYS:int
    +SKY_COLOR :color
    +TERRAIN_COLOR :color
    +BLACK :color
    +GRAY :color
    +YELLOW :color
    +PIXEL_SIZE :int
    +X_SPEED :int
    +TANK_RADIO :int
    +DarkGreen :color
    +White:color
    +Menu :color
}
class ImpactType{
    +TERRAIN :int
    +BORDER :int
    +TANK :int
    +SUICIDIO int
}

class Explosion extends Drawable{
    +t_animacion :float
    +position :pygame.Vector2
    +image: list[pygame.surface.Surface]

    +tick(dt: float)
    +has_next()
    +Explosion(TankGame)
    +draw(screen: pygame.surface.Surface)
}



class CannonballType{
    +MM60 = int
    +MM80 = int
    +MM105 = int

}

class SelfImpactWindows extends Drawable {
    + SelfImpactWindows(TankGame):
    + draw(screen: pygame.surface.Surface):
}

class WarnningWindows extends Drawable {
    +num_seleccionado: int
    +quantity: list[int]

    +WarnningWindows(TankGame)
    +get_background(screen: pygame.surface.Surface)
    +is_current_cannonball_available()
    +draw(screen: pygame.surface.Surface):
}

class Map{
    +terrain_colors: list[str]
    +background_image: str
    +storm_color = str
    +chosen_biome: int
    +Map()
    +define_terrain_colors()
    +define_background_image()
    +define_storm_color()
}

class SnowStorm extends Drawable{
    +snowflakes: list[pygame.Vector2]
    +wind: Optional[Wind]

    +SnowStorm(storm_color: str, wind: Optional[Wind])
    +add_random_snowflake()
    +tick():None
    +draw_snowflakes()
    +draw():None
}

class Menu{
   +fontTitle: Font
   +storm: SnowStorm
   +box_size = (instance.windows_size[0] / 6.4, instance.windows_size[1] / 7.2)
   +box_pos: Optional[tuple[float, float]]
   +botton_color: str
   +hover_botton_color: str
   +is_hover: bool
   +prev: bool

    +Menu(pygame.surface.Surface)
    +render()
    +show_menu()
    +handle_input()

}
enum MenuStatus {
    nothing
    start 
    options
}

class ExitRequested extends Exception{

}
class RestartRequested extends Exception{

}

class OptionMenu{
    +box_size = pygame.Vector2
    +box_pos: Optional[tuple[float, float]]
    +hover_botton_color: str
    +button_position = pygame.Vector2
    +sobre: Optional[int]
    +OptionMenu(Surface)
    +render()
    +start_option_menu
    +handle_input(mouse: pygame.Vector2))
    +paint_left(index:int)
    +paint_right(index:int)
    +principal_button(index:int)
    +selection()

}

class Bot(Tank)
{
    +Bot()
    +random_shoot(pygame.Vector2)
    +selection_cannonball()
}
class Context {
    +rounds: int
    +screen: pygame.surface.Surface
    +number_of_players: int
    +number_of_bots: int
    +number_of_rounds: int
    +__windows_size: tuple[int, int]
    +map_size: tuple[int, int]
    +__fps: float
    +clock: pygame.time.Clock
    +players: list[player.Player]
    +type_of_effect: AmbientEffect

    +Context()
    +fps()-> float
    +fps(val)
    +windows_size()
    +windows_size(new_size: tuple[int, int])


}
class AmbientEffect(Enum){
    +NONE = int
    +GRAVITY = int
    +WIND = int
    +GRAVITY_AND_WIND = int
}





class Round{
    +tanks: list[Tank]
    +context: Context
    +players: list[Player]
    +turns_queue: list[int]
    +actual_player: int
    +cannonball: Optional[Cannonball]
    +tanks_alive: int
    +wind: Optional[Wind]

    +Round()
    +create_turns()
    +create_tanks()
    +generate_tanks_positions()
    +find_tank()
    +draw_cannonball_indicator(sf: pygame.surface.Surface)
    +render()
    +process_input()
    +process_in_game_menu()
    +process_cannonball_trajectory()
    +get_current_tank()
    +calculate_distance(tank: Tank)
    +wait_release_space()
    +cannonball_travel()
    +wait_on_space()
    +check_last_state()
    +terrain_destruction()
    +display_explotion()
    +display_fire
    +next_turn()
    +start()
}


enum InGameMenuStatus {
    EXIT
    CONTINUE
    RESTART
}

class Inputs {
    +check_running()
}

class Shop {
    +money_font: Font
    +c60_button_color: str
    +c80_button_color: str
    +c105_button_color: str
    +reset_button_color: str
    +buy_button_color: str
    +hover_button_color: str
    +upon: Optional[int]
    +Ammo60: int
    +Ammo80: int
    Ammo105: int

    +check_running()

    +Shop(screen: pygame.surface)
    +draw_shop(contador60mm, contador80mm, contador105mm)
    +generate_shop(tank: Tank, i)
    +start_shop(tank: Tank, i)
    +handle_input(mouse: pygame.Vector2)
    +cannonball_buttons(message: str)
    +reset_shopping(message: str)
    +buy_ammo(message: str)
    +show_buy(tank: Tank)

}

class ShopStatus{
    C60AMMO: int
    C80AMMO: int
    C105AMMO: int
    RESTART: int
    BUY: int
}
class Wind{
    +__velocity: float
    +__target_velocity: float
    +__min_velocity: int
    +__max_velocity: int

    +Wind()
    +velocity() -> float
    +tick(dt: float) -> None
}



Inputs -- TankGame
Inputs -- Round
TankGame -- Constants
TankGame o--> Player
TankGame o--> Context
TankGame *--> Menu
TankGame *--> OptionMenu
TankGame -- Round
TankGame -- ExitRequested
TankGame -- AudioCache
TankGame -- SoundCache
TankGame -- FontCache

Main *--> TankGame
WinnerScreen *--> TankGame
InGameMenu o--> TankGame
InGameMenu *--> InGameMenuStatus
Round *--> Tank
Round *--> Context
Round o--> Cannonball
Round o--> CannonballType
Round *--> ExitRequested
Round *--> RestartRequested
Round *--> Terrain
Round o--> Background
Round o--> Impact
Round *--> Map
Round *--> HUD
Round *--> ImpactType
Round *--> InGameMenu
Round *--> InGameMenuStatus
Round *--> SnowStorm
Round *--> AudioCache
Round *--> FontCache
Round *--> AnimationCache
Round o--> WarningWindows
Round o--> WinnerScreen
Round -- inputs
Background *--> Context
Background *--> ImageCache
Terrain *--> ImageCache
Menu *--> ImageCache
Menu *--> FontCache
HUD *--> FontCache
HUD *--> ImageCache
SnowStorm *--> Context
InGameMenu *--> ImageCache
InGameMenu *--> AudioCache
InGameMenu *--> FontCache
Tank *--> Player
Tank o--> CannonballType
HUD *--> Tank
HUD o--> Speedometer
HUD *--> SelfImpactWindows
Impact *--> ImpactType
OptionMenu *-->MenuStatus

@enduml
