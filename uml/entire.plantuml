@startuml

top to bottom direction
skinparam linetype ortho

class TankGame {
    + terrain: Terrain
    + tanks: list[Tank]
    + screen: pygame.Surface
    + cannonball: Optional[Cannonball]
    +old_cannonballs : listCannonball]
    + running: bool
    + actual_player: int
    + winner: Optional[int]
    +winner_msj: Optional[WinnerScreen]
    +last_state: Optional[Impact]
    +select_Cannonball : Optional[SelectCannonball]
    show_screen: bool

    + TankGame():
    + render(): None
    + check_running(): bool
    + process_input(): None
    + process_cannonball_trajectory(): None
    +calculate_distance
    + wait_release_space(): None
    + cannonball_travel(): None
    +life_tank
    + wait_on_space(): None
    + check_last_state(): None
    + start_menu(): None
    +start()
    +main()

}

class Cannonball extends Drawable {
    + position: Point
    + velocity: Velocity
    + trajectory: list[pygame.Vector2]
    + max_height: int
    + max_distance: int
    + is_alive: bool

    +Cannonball(Position, Velocity):
    +tick(dt: float):
    +kill():
    +draw_trajectory(screen: pygame.surface.Surface):
    +draw(screen: pygame.surface.Surface)
    +get_max_height(): int
    +calculate_distance_to(tank_position: pygame.Vector2): int
}
class Cannonball105mm extends Cannonball{
    +Cannonball105mm(Position, Velocity):
    + damage: int
    + radius_damage: int
    + units_available: int
    +Cannonball105mm(position, velocity)
    +draw(Surface)
}
class Cannonball60mm extends Cannonball{
    +Cannonball60mm((Position, Velocity):
    + damage: int
    + radius_damage: int
    + units_available: int
    +draw(Surface)
}
 class Cannonball80mm extends Cannonball{
    +Cannonball80mm((Position, Velocity):
    + damage: int
    + radius_damage: int
    + units_available: int
    +draw(Surface)
}
interface Drawable {
    + draw(Surface)
}
class HUD extends Drawable{
    + tanks: list[Tank]
    + left: int
    + top: int
    + width: int
    + height: int
    + color: list[int]
 +HUD(tank,TankGame)
 +draw_shoot_into(screen: pygame.surface.Surface)
 + draw_cannonball_105_mm(self, screen: pygame.surface)
 + draw_cannonball_80_mm(self, screen: pygame.surface)
 + draw_cannonball_60_mm(self, screen: pygame.surface)
 +health_bars()
 +get_select_cannonball()
 +get_cannonball_indicators()
 +draw(screen: pygame.surface.Surface)
 +show_instructions(screen: pygame.surface.Surface)

 }
class WinnerScreen extends Drawable{
    +WinnerScreen():
    +winner_mensaje(Surface)
    +draw(Surface): None
}

class Terrain extends Drawable,Collidable {
    +size: tuple[int, int]
    +ground_lines: list[int]
    +new_ground_lines: list[list[float]]


    +Terrain(int, int)
    +generate_terrain(mountains: int, valleys: int)
    +mountain(i: int, j: int, height: int):
    +valley( inicio: int, fin: int, profundidad: int)
    +draw( screen: pygame.surface.Surface)
    +collidesWith( point: pygame.Vector2): bool
}
class Speedometer{
    +size: int
    +min: int
    +max: int
    +actual: float
    +Speedometer()
    +get_draw()
}
class Collidable {
 +collides_with(Point)) : Boolean
}

class Background extends Drawable{
    +sky_image: pygame.Surface
    +snowflakes: list[pygame.Vector2]
    +wind: float
    +wind_target: float

    + Background()
    + draw(Surface):None

}
class Tank extends Collidable  {
    - player: Player
    - color: Color
    - position: Position
    -shoot_velocity: float
    -shoot_angle: float
    +actual: int
    +available: list[int]
    +select: SelectCannonball
    +life: int


    +Tank(position,color,player)
    +draw(Surface) : None
    +collides_with(Point,cannon) : Boolean
    +shoot(): Cannonball:
}

class Player {
    +name: str
    +points: int
    +Player(str, int)
    +score(impact: Impact, tank_position: pygame.Vector2)


}
class WinnerScreen extends Drawable
{
    + WinnerScreen()
    +winner_mensaje(screen: pygame.surface.Surface)
    +fuegos_artificiales(screen: pygame.surface.Surface)
}
class Impact
{
    +position: pygame.Vector2
    +impact_type: int

    +Impact(Position, ImpactType)
}

class Constants {
    + GRAVITY: double
    + TANK_HIT_BOX_SIZE: double
    + TERRAIN_COLOR: Color
    + WINDOWS_SIZE :int
    + TERRAIN_LINE_WIDTH:int
    + SEA_LEVEL :int
    + FPS :int
    +MOUNTAINS:int
    +VALLEYS:int
    +SKY_COLOR :color
    +TERRAIN_COLOR :color
    +BLACK :color
    +GRAY :color
    +YELLOW :color
    +PIXEL_SIZE :int
    +X_SPEED :int
    +TANK_RADIO :int
    +DarkGreen :color
    +White:color
    +Menu :color
}
class ImpactType{
    +TERRAIN :int
    +BORDER :int
    +TANK :int
    +SUICIDIO int
}

class CannonballType{
    +MM60 = int
    +MM80 = int
    +MM105 = int

}

class SelfImpactWindows extends Drawable {
    + SelfImpactWindows(TankGame):
    + draw(screen: pygame.surface.Surface):
}
class SnowStorm extends Drawable{
    +snowflakes: list[pygame.Vector2]
    +wind: float
    +wind_target: float
    +SnowStorm()
    +add_random_snowflake()
    +tick():None
    +draw_snowflakes()
    +draw():None
}

class Menu extends Drawable, Collidable{
    storm: SnowStorm
    box_size = (200, 100)
    box_pos: Optional[tuple[float, float]]
    botton_color: str
    hover_botton_color: str
    is_hover: bool
    +Menu()
    +draw(pygame.surface)
    +collidesWith( point: pygame.Vector2): bool
}

TankGame -- Constants

WinnerScreen *--> TankGame
TankGame *--> Tank
TankGame o--> Cannonball
TankGame *--> Terrain
TankGame o--> Background
TankGame o--> Impact
Tank *--> Player
HUD *--> Tank
HUD *--> SelfImpactWindows
Impact *--> ImpactType
TankGame *--> Impact

@enduml
