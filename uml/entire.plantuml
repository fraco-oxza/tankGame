@startuml

top to bottom direction
skinparam linetype ortho

' Fco
class TankGame {
    + terrain: Terrain
    + tanks: list[Tank]
    + cannonBall: Optional[Cannonball]
    + screen: pygame.Surface
    + running: bool
    + actual_player: int
    + winner: Optional[int

    + TankGame():
    + render(): None
    + check_running(): bool
    + process_input(): None
    + process_cannonball_trajectory(): None
    + wait_release_space(): None
    + start(): None

}

class Cannonball extends Drawable {
    - position: Point
    - velocity: Velocity
    - trajectory: list[pygame.Vector2]
    - max_height: int
    - max_distance: int
    - is_alive: bool

    +tick(dt: float)
    +kill():
    +draw_trajectory(screen: pygame.surface.Surface):
    +draw(screen: pygame.surface.Surface)
    +get_max_height(): int
    +calculate_distance_to(tank_position: pygame.Vector2): int



}

interface Drawable {
    + draw(Surface)
}

class HUD extends Drawable{
    + tanks: list[Tank]
    + left: int
    + top: int
    + width: int
    + height: int
 +draw(screen: pygame.surface.Surface)
 +show_instructions(screen: pygame.surface.Surface)

 }
class WinnerScreen extends Drawable{
    +winner_mensaje(Surface)
    +fuegos_artificiales(Surface)
    +draw(Surface): None
}

class Terrain extends Drawable {
    +gruond_lines: List<Int>

    + generate_terrain(mountains: int, valleys: int)
    +mountain(i: int, j: int, height: int):
    +valley( inicio: int, fin: int, profundidad: int)
    +draw( screen: pygame.surface.Surface)
    +collidesWith( point: pygame.Vector2): bool
}
class Collidable {
 +collides_with(Point)) : Boolean
}

class Background extends Drawable{
    +sky_image: pygame.Surface
    +snowflakes: list[pygame.Vector2]
    +wind: float
    +wind_target: float

    + add_random_snowflake()
    + draw_snowflakes(Surface)
    +draw(Surface):None
}
class Tank extends Collidable  {
    - player: Player
    - color: Color
    - position: Position
    -shoot_velocity: float
    -shoot_angle: float

    +draw(Surface) : None
    +collides_with(Point)) : Boolean
    +shoot(): Cannonball:
}

class Player {
    +name: str
    + points: double
    +score(position_cannonball, position) : int
    +score(impact: Impact, tank_position: pygame.Vector2)
}
class WinnerScreen extends Drawable
{
    +winner_mensaje(screen: pygame.surface.Surface)
    +fuegos_artificiales(screen: pygame.surface.Surface)
}
class Impact:
{
    +position: pygame.Vector2
    +impact_type: int

}

class Constants {
    + GRAVITY: double
    + TANK_HIT_BOX_SIZE: double
    + TERRAIN_COLOR: Color
    + WINDOWS_SIZE :int
    + TERRAIN_LINE_WIDTH:int
    + SEA_LEVEL :int
    + FPS :int
    +MOUNTAINS:int
    +VALLEYS:int
    +SKY_COLOR :color
    +TERRAIN_COLOR :color
    +BLACK :color
    +GRAY :color
    +YELLOW :color
    +PIXEL_SIZE :int
    +X_SPEED :int
    +TANK_RADIO :int
    +DarkGreen :color
    +White:color
    +Menu :color
}
class ImpactType{
    +TERRAIN :int
    +BORDER :int
    +TANK :int
    +SUICIDIO int
}
TankGame -- Constants
WinnerScreen *-->  TankGame
TankGame *--> Tank
TankGame o--> Cannonball
TankGame *--> Terrain
Tank *--> Player
HUD *--> Tank
Impact *-->ImpactType
TankGame *-->Impact

@enduml